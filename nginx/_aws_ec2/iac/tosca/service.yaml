tosca_definitions_version: tosca_simple_yaml_1_3

metadata:
  template_name: "nginx-aws-ec2"
  template_author: "XLAB-POLIMI"
  template_version: "1.0"

imports:
  - library/nginx/main.yaml
  - library/aws/prerequisites/prerequisites.yaml
  - library/aws/ec2_keypair/ec2_keypair.yaml
  - library/aws/vpc_subnet/vpc_subnet.yaml
  - library/aws/ec2_role/ec2_role.yaml
  - library/aws/ec2_vm/ec2_vm.yaml

topology_template:
  inputs:
    host_ip:
      type: string
    region:
      type: string
    ec2_role_name:
      type: string
    ssh_key_file_path:
      type: string
    ssh_key_name:
      type: string
    ssh_user:
      type: string
    security_group:
      type: string
    instance_type:
      type: string
    image:
      type: string

  node_templates:
    my-workstation:
      type: tosca.nodes.Compute
      attributes:
        private_address: { get_input: host_ip }
        public_address: { get_input: host_ip }

    prerequisites:
      type: radon.nodes.aws.prerequisites
      requirements:
        - host: my-workstation

    vpc_subnet:
      type: radon.nodes.aws.vpc_subnet
      properties:
        region: { get_input: region }
      requirements:
        - host: my-workstation
        - requires_prerequisites: prerequisites

    ec2_role:
      type: radon.nodes.aws.ec2_role
      properties:
        region: { get_input: region }
        role_name: { get_input: ec2_role_name }
      requirements:
        - host: my-workstation
        - requires_prerequisites: prerequisites

    ec2_keypair:
      type: radon.nodes.aws.ec2_keypair
      properties:
        ssh_key_name: { get_input: ssh_key_name }
        ssh_key_file_path: { get_input: ssh_key_file_path }
        region: { get_input: region }
      requirements:
        - host: my-workstation
        - requires_prerequisites: prerequisites

    ec2_vm:
      type: radon.nodes.aws.ec2_vm
      properties:
        security_group: { get_input: security_group }
        ssh_user: { get_input: ssh_user }
        image: { get_input: image }
        ssh_key_name: { get_input: ssh_key_name }
        instance_type: { get_input: instance_type }
        region: { get_input: region }
      requirements:
        - host: my-workstation
        - requires_prerequisites: prerequisites
        - requires_role: ec2_role
        - requires_vpc: vpc_subnet
        - requires_keypair: ec2_keypair

    nginx:
      type: nginx.Server
      properties:
        ssh_user: { get_input: ssh_user }
        ssh_key_file: { get_input: ssh_key_file_path }
      requirements:
        - host: ec2_vm

    site:
      type: nginx.Site
      properties:
        ssh_user: { get_input: ssh_user }
        ssh_key_file: { get_input: ssh_key_file_path }
      requirements:
        - host: nginx

  outputs:
    ec2_web_page_address:
      description: Web page address
      value: { concat: [ 'http://', get_attribute: [ ec2_vm, public_address ] ] }
